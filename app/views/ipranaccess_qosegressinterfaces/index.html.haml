.row.margin-top-10
  .col-md-1
  .col-md-10
    %h3.margin-top-10
      Reporte de QoS SAP_Egress en los Equipos Nokia
      = link_to 'Excel', ipranaccess_qosegressinterfaces_path(format: "xls"), class: 'btn btn-sm btn-warning float-right'
      - if user_signed_in? && current_user.is_admin_user?
        = link_to 'CSV', ipranaccess_qosegressinterfaces_path(format: "csv"), class: 'btn btn-sm btn-warning float-right'
      .updated
        Actualizado:
        - unless IpranaccessQosegressinterface.last == nil
          = IpranaccessQosegressinterface.last.created_at.strftime("%d/%m/%Y %H:%M:%S")
        - else
          '-'
  .col-md-2

.row.margin-top-02
  .col-md-1
  .col-md-10
    .float-left 
      = link_to 'Volver', ppmreports_path, class: 'btn btn-sm btn-volver'

.row.margin-top-10.search-form-container
  .col-md-1
  .col-md-10
    = search_form_for @search, url: search_ipranaccess_qosegressinterfaces_path, method: :post, :html => {:class => "form-horizontal form-row"} do |f|
      = f.condition_fields do |c|
        = render 'condition_fields', f: c
      %p= link_to_add_fields "Agregar", f, :condition
      .form-row.row_spacer.no-margin
        Ordenar:
      .form-inline.field
        .form-row
          = f.sort_fields do |s|
            = s.sort_select({}, :class => 'form-control')
      .form-row
        .actions
          = f.submit "Buscar", class: 'btn btn-sm btn-success row_spacer'
          = f.submit "Clear", :name => nil, :id => :q_reset, class: 'btn btn-sm btn-info row_spacer'

.row.margin-top-00
  .col-md-12
    = will_paginate @ipranaccess_qosegressinterfaces, renderer: BootstrapPagination::Rails
    %table.table.table-striped.table-bordered.table-condensed.table-hover.text-center.margin-top-10#myTable
      %thead
        %tr
          %th Nombre de Equipo
          %th SAP (SubInterface)
          %th Cola de Servicio
          %th Tráfico Mbps
          %th Paquetes Descartados OUT
          %th.text-center.cursor{:onclick => "sortTableNumeric (5)"}
            AVG Paquetes Descartados OUT
          %th Medio de Transmisión
          %th Servicio
          %th Fecha de Solución
          %th Comentario
          %th

      %tbody
        - @ipranaccess_qosegressinterfaces.each do |ipranaccess_qosegressinterface|
          %tr
            %td= ipranaccess_qosegressinterface.device
            %td= ipranaccess_qosegressinterface.sap
            %td= ipranaccess_qosegressinterface.queueId
            %td= ipranaccess_qosegressinterface.bps_max
            %td= ipranaccess_qosegressinterface.discard
            %td= (((IpranaccessQosegressinterface.where(created_at: (IpranaccessQosegressinterface.maximum(:created_at) - 6.hours)..(IpranaccessQosegressinterface.maximum(:created_at))).where(device_sapqueue: ipranaccess_qosegressinterface.device_sapqueue).pluck(:discard)).inject{ |sum, el| sum + el }.to_f) / ((IpranaccessQosegressinterface.where(created_at: (IpranaccessQosegressinterface.maximum(:created_at) - 6.hours)..(IpranaccessQosegressinterface.maximum(:created_at))).where(device_sapqueue: ipranaccess_qosegressinterface.device_sapqueue).pluck(:discard))).size).round(2)
            %td= ipranaccess_qosegressinterface.tx_provider.name
            %td= ipranaccess_qosegressinterface.service
            %td= ipranaccess_qosegressinterface.time
            %td= ipranaccess_qosegressinterface.comment
            %td= link_to 'Mostrar Historial', ipranaccess_qosegressinterface, target: :_blank

:javascript
  function sortTableNumeric(n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById('myTable');
    switching = true;
    //Set the sorting direction to ascending:
    dir = "asc"; 
    /*Make a loop that will continue until
    no switching has been done:*/
    while (switching) {
      //start by saying: no switching is done:
      switching = false;
      rows = table.rows;
      /*Loop through all table rows (except the
      first, which contains table headers):*/
      for (i = 1; i < (rows.length - 1); i++) {
        //start by saying there should be no switching:
        shouldSwitch = false;
        /*Get the two elements you want to compare,
        one from current row and one from the next:*/
        x = rows[i].getElementsByTagName("td")[n];
        y = rows[i + 1].getElementsByTagName("td")[n];
        /*check if the two rows should switch place,
        based on the direction, asc or desc:*/
        if (dir == "asc") {
          if (Number(x.innerHTML) > Number(y.innerHTML)) {
            //if so, mark as a switch and break the loop:
            shouldSwitch= true;
            break;
          }
        } else if (dir == "desc") {
          if (Number(x.innerHTML) < Number(y.innerHTML)) {
            //if so, mark as a switch and break the loop:
            shouldSwitch = true;
            break;
          }
        }
      }
      if (shouldSwitch) {
        /*If a switch has been marked, make the switch
        and mark that a switch has been done:*/
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        //Each time a switch is done, increase this count by 1:
        switchcount ++;      
      } else {
        /*If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again.*/
        if (switchcount == 0 && dir == "asc") {
          dir = "desc";
          switching = true;
        }
      }
    }
  }